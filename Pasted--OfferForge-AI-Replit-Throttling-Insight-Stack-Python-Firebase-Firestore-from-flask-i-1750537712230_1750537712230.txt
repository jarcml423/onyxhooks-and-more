# 📦 OfferForge AI – Replit Throttling + Insight Stack (Python + Firebase Firestore)

from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import firebase_admin
from firebase_admin import credentials, firestore
import uuid

# --- 🔐 Initialize Firebase ---
cred = credentials.Certificate("path/to/your-service-account.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

# --- 🚀 Flask App ---
app = Flask(__name__)

# --- 📊 Plan Limits ---
PLAN_LIMITS = {
    "Free": {"hook": 2, "offer": 2, "council": 1},
    "Starter": {"hook": 25, "offer": 10, "council": 2},
    "Pro": {"hook": 999, "offer": 999, "council": 3},
    "Vault": {"hook": 9999, "offer": 9999, "council": 9999}
}

# --- ⏱ Daily Reset Helper ---
def needs_reset(last_reset):
    today = datetime.utcnow().date()
    last = datetime.strptime(last_reset, "%Y-%m-%dT%H:%M:%S.%fZ").date()
    return last < today

# --- 🔄 Usage Check + Update ---
def check_and_update_usage(user_id, action_type):
    doc_ref = db.collection("users").document(user_id)
    doc = doc_ref.get()

    if not doc.exists:
        return {"error": "User not found."}, 404

    user_data = doc.to_dict()
    plan = user_data.get("plan", "Free")
    usage = user_data.get("usage", {"hook": 0, "offer": 0, "council": 0})
    last_reset = user_data.get("lastReset", datetime.utcnow().isoformat())

    if needs_reset(last_reset):
        usage = {"hook": 0, "offer": 0, "council": 0}
        doc_ref.update({"usage": usage, "lastReset": datetime.utcnow().isoformat()})

    if usage.get(action_type, 0) >= PLAN_LIMITS[plan][action_type]:
        return {"error": f"{action_type.title()} limit reached for {plan} plan."}, 429

    usage[action_type] = usage.get(action_type, 0) + 1
    doc_ref.update({"usage": usage})

    return {"success": True, "newCount": usage[action_type]}

# --- 🧠 Weekly Summary Triggered by Cron ---
@app.route("/send-weekly-summary", methods=["POST"])
def send_weekly_summary():
    users = db.collection("users").stream()
    now = datetime.utcnow()

    for user in users:
        data = user.to_dict()
        frequency = data.get("summaryFrequency", "none")
        last_sent = datetime.strptime(data.get("lastSummarySent", now.isoformat()), "%Y-%m-%dT%H:%M:%S.%f")
        if frequency != "none" and (now - last_sent >= timedelta(days=7)):
            # Compose personalized summary (Mosaic-style)
            usage = data.get("usage", {})
            tier = data.get("plan", "Free")
            coach_name = data.get("name", "Coach")
            transformation = data.get("transformationDelivered", "")
            summary = f"Mosaic here — {coach_name}, your progress shows momentum. You generated {usage.get('hook', 0)} hooks and {usage.get('offer', 0)} offers. Let's refine your transformation: {transformation}"
            # Send summary via email (SendGrid logic placeholder)
            print(f"[EMAIL SENT to {data.get('email')}]: {summary}")
            db.collection("users").document(user.id).update({"lastSummarySent": now.isoformat()})

    return jsonify({"status": "Weekly summaries sent"}), 200

# --- 🧪 Score Coaching Inputs ---
def score_transformation_field(transformation):
    # Simple prompt-engineered logic to gauge quality
    if not transformation or len(transformation.split()) < 5:
        return {"score": 40, "feedback": "Too vague. Try being more specific about the result your client receives."}
    elif any(x in transformation.lower() for x in ["confidence", "help", "transform"]):
        return {"score": 70, "feedback": "Better. Try naming a measurable business or life outcome."}
    else:
        return {"score": 90, "feedback": "Strong! This communicates value and outcome clearly."}

@app.route("/score-transformation", methods=["POST"])
def score_transformation():
    content = request.json
    transformation = content.get("transformation", "")
    return jsonify(score_transformation_field(transformation))

# --- 🧠 Profile Collection for Personalized Scoring ---
@app.route("/submit-offer-profile", methods=["POST"])
def submit_offer_profile():
    data = request.json
    user_id = data.get("user_id")
    if not user_id:
        return jsonify({"error": "Missing user_id"}), 400

    profile_data = {
        "description": data.get("description", ""),
        "transformationDelivered": data.get("transformation", ""),
        "industry": data.get("industry", ""),
        "coachType": data.get("coachType", ""),
        "painPoint": data.get("painPoint", ""),
        "hook": data.get("hook", "")
    }

    db.collection("users").document(user_id).update(profile_data)
    return jsonify({"success": True})

# --- 🎯 Endpoint Example ---
@app.route("/check-usage", methods=["POST"])
def check_usage():
    data = request.json
    user_id = data.get("user_id")
    action_type = data.get("action_type")
    if not user_id or not action_type:
        return jsonify({"error": "Missing user_id or action_type"}), 400
    return jsonify(check_and_update_usage(user_id, action_type))

# --- ✅ Start Flask ---
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
